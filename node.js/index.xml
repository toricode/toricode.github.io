<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on Tori Code</title>
    <link>https://toricode.com/node.js/</link>
    <description>Recent content in Node.js on Tori Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jan 2020 01:42:32 +0700</lastBuildDate>
    
	<atom:link href="https://toricode.com/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Node.js Compress File into gzip Format</title>
      <link>https://toricode.com/nodejs-compress-file-into-gzip-format/</link>
      <pubDate>Mon, 06 Jan 2020 01:42:32 +0700</pubDate>
      
      <guid>https://toricode.com/nodejs-compress-file-into-gzip-format/</guid>
      <description>Using Node.js built-in fs and zlib modules to compress a file into gzip format.
   (adsbygoogle = window.adsbygoogle || []).push({});  For example, we have the Document.pdf file as below located at D:\ToriCode\Nodejs directory.

Compress file using fs and zlib modules Below Node.js code example to compress Document.pdf file above to compressed file named Document.pdf.gz
let fs = require(&amp;#39;fs&amp;#39;); let zlib = require(&amp;#39;zlib&amp;#39;); let gzip = zlib.</description>
    </item>
    
    <item>
      <title>Quick Steps Creating Node.js Project using npm</title>
      <link>https://toricode.com/quick-steps-creating-nodejs-project-using-npm/</link>
      <pubDate>Mon, 06 Jan 2020 01:13:44 +0700</pubDate>
      
      <guid>https://toricode.com/quick-steps-creating-nodejs-project-using-npm/</guid>
      <description>Step by step to create a new Node.js project using node package manager npm tool.
   (adsbygoogle = window.adsbygoogle || []).push({});  Step 1 - Creating new empty directory For example we are going to create new directory named webapp via command line and then navigate to new directory. D:\ToriCode\Nodejs&amp;gt;mkdir webapp D:\ToriCode\Nodejs&amp;gt;cd webapp D:\ToriCode\Nodejs\webapp&amp;gt;

Step 2 - Using npm tool to create new empty project D:\ToriCode\Nodejs\webapp&amp;gt;npm init -y Wrote to D:\ToriCode\Nodejs\webapp\package.</description>
    </item>
    
    <item>
      <title>Writing Text File using File System fs Module</title>
      <link>https://toricode.com/nodejs-writing-text-file-using-file-system-fs-module/</link>
      <pubDate>Sun, 05 Jan 2020 19:24:15 +0700</pubDate>
      
      <guid>https://toricode.com/nodejs-writing-text-file-using-file-system-fs-module/</guid>
      <description>Using Node.js built-in file system fs module to create and write content to a text file.
   (adsbygoogle = window.adsbygoogle || []).push({});  Write text to file using fs.appendFile() method The fs.appendFile() method to append text to an existing file.
It will create a new file if the file does not exist.
Example code below will create new file named test.txt and append text &amp;lsquo;Welcome to toricode.com&amp;rsquo; to it.</description>
    </item>
    
    <item>
      <title>Reading Text File using fs.readFile()</title>
      <link>https://toricode.com/nodejs-reading-text-file-using-fs.readfile/</link>
      <pubDate>Sun, 05 Jan 2020 15:57:09 +0700</pubDate>
      
      <guid>https://toricode.com/nodejs-reading-text-file-using-fs.readfile/</guid>
      <description>Using Node.js built-in file system fs module to read a text file.
   (adsbygoogle = window.adsbygoogle || []).push({});  Creating sample text file Firstly creating a sample text file named sample.txt on the same directory of your Node.js code with below content. Welcome to toricode.com Happy Coding!

Reading file with utf8 encoding option Below are example code how to read a text file using fs.readFile() method with utf8 encoding option and log it to the console.</description>
    </item>
    
    <item>
      <title>Creating HTTP Server using http.createServer()</title>
      <link>https://toricode.com/nodejs-creating-http-server-using-http.createserver/</link>
      <pubDate>Sat, 04 Jan 2020 13:46:02 +0700</pubDate>
      
      <guid>https://toricode.com/nodejs-creating-http-server-using-http.createserver/</guid>
      <description>Using Node.js built-in HTTP module to create a simple HTTP Server that return a text or HTML content when you access via browser.
   (adsbygoogle = window.adsbygoogle || []).push({});  Example 1 - Creating HTTP server to return a simple text content var http = require(&amp;#39;http&amp;#39;); var server = http.createServer(); server.on(&amp;#39;request&amp;#39;, function(req, res){ res.writeHead(200, {&amp;#39;content-type&amp;#39;: &amp;#39;text/plain&amp;#39;}); res.write(&amp;#39;Welcome to toricode.com&amp;#39;); res.end(); }); var port = 8080; server.listen(port); server.once(&amp;#39;listening&amp;#39;, function(){ console.</description>
    </item>
    
  </channel>
</rss>